package com.example.gits.spm.generated;

import com.example.gits.spm.GitsApplication;
import com.example.gits.spm.GitsApplicationBuilder;
import com.example.gits.spm.GitsApplicationImpl;
import com.example.gits.spm.dbms.gitsdb.gitbranch.GitbranchManagerImpl;
import com.example.gits.spm.dbms.gitsdb.gitbranch.GitbranchSqlAdapter;
import com.example.gits.spm.dbms.gitsdb.gitrepos.GitreposManagerImpl;
import com.example.gits.spm.dbms.gitsdb.gitrepos.GitreposSqlAdapter;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.Injector;
import com.speedment.runtime.application.AbstractApplicationBuilder;

/**
 * A generated base {@link
 * com.speedment.runtime.application.AbstractApplicationBuilder} class for the
 * {@link com.speedment.runtime.config.Project} named gits.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedGitsApplicationBuilder extends AbstractApplicationBuilder<GitsApplication, GitsApplicationBuilder> {
    
    protected GeneratedGitsApplicationBuilder() {
        super(GitsApplicationImpl.class, GeneratedGitsMetadata.class);
        withManager(GitbranchManagerImpl.class);
        withManager(GitreposManagerImpl.class);
        withComponent(GitbranchSqlAdapter.class);
        withComponent(GitreposSqlAdapter.class);
    }
    
    @Override
    public GitsApplication build(Injector injector) {
        return injector.getOrThrow(GitsApplication.class);
    }
}