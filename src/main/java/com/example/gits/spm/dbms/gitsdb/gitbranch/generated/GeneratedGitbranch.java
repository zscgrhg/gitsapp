package com.example.gits.spm.dbms.gitsdb.gitbranch.generated;

import com.example.gits.spm.dbms.gitsdb.gitbranch.Gitbranch;
import com.example.gits.spm.dbms.gitsdb.gitrepos.Gitrepos;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.BooleanField;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.LongForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import com.speedment.runtime.typemapper.bytes.ByteZeroOneToBooleanMapper;
import com.speedment.runtime.typemapper.time.TimestampToLocalDateTimeMapper;

import java.sql.Timestamp;
import java.time.LocalDateTime;

/**
 * The generated base for the {@link
 * com.example.gits.spm.dbms.gitsdb.gitbranch.Gitbranch}-interface representing
 * entities of the {@code gitbranch}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedGitbranch {
    
    /**
     * This Field corresponds to the {@link Gitbranch} field that can be
     * obtained using the {@link Gitbranch#getId()} method.
     */
    LongField<Gitbranch, Long> ID = LongField.create(
        Identifier.ID,
        Gitbranch::getId,
        Gitbranch::setId,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Gitbranch} field that can be
     * obtained using the {@link Gitbranch#getProjectId()} method.
     */
    LongForeignKeyField<Gitbranch, Long, Gitrepos> PROJECT_ID = LongForeignKeyField.create(
        Identifier.PROJECT_ID,
        Gitbranch::getProjectId,
        Gitbranch::setProjectId,
        Gitrepos.ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Gitbranch} field that can be
     * obtained using the {@link Gitbranch#getName()} method.
     */
    StringField<Gitbranch, String> NAME = StringField.create(
        Identifier.NAME,
        Gitbranch::getName,
        Gitbranch::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Gitbranch} field that can be
     * obtained using the {@link Gitbranch#getBaseChash()} method.
     */
    StringField<Gitbranch, String> BASE_CHASH = StringField.create(
        Identifier.BASE_CHASH,
        Gitbranch::getBaseChash,
        Gitbranch::setBaseChash,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Gitbranch} field that can be
     * obtained using the {@link Gitbranch#getBaseRef()} method.
     */
    StringField<Gitbranch, String> BASE_REF = StringField.create(
        Identifier.BASE_REF,
        Gitbranch::getBaseRef,
        Gitbranch::setBaseRef,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Gitbranch} field that can be
     * obtained using the {@link Gitbranch#getBaseline()} method.
     */
    ComparableField<Gitbranch, Timestamp, LocalDateTime> BASELINE = ComparableField.create(
        Identifier.BASELINE,
        Gitbranch::getBaseline,
        Gitbranch::setBaseline,
        new TimestampToLocalDateTimeMapper(),
        false
    );
    /**
     * This Field corresponds to the {@link Gitbranch} field that can be
     * obtained using the {@link Gitbranch#getCreationTime()} method.
     */
    ComparableField<Gitbranch, Timestamp, LocalDateTime> CREATION_TIME = ComparableField.create(
        Identifier.CREATION_TIME,
        Gitbranch::getCreationTime,
        Gitbranch::setCreationTime,
        new TimestampToLocalDateTimeMapper(),
        false
    );
    /**
     * This Field corresponds to the {@link Gitbranch} field that can be
     * obtained using the {@link Gitbranch#getUpdateTime()} method.
     */
    ComparableField<Gitbranch, Timestamp, LocalDateTime> UPDATE_TIME = ComparableField.create(
        Identifier.UPDATE_TIME,
        Gitbranch::getUpdateTime,
        Gitbranch::setUpdateTime,
        new TimestampToLocalDateTimeMapper(),
        false
    );
    /**
     * This Field corresponds to the {@link Gitbranch} field that can be
     * obtained using the {@link Gitbranch#getDeleted()} method.
     */
    BooleanField<Gitbranch, Byte> DELETED = BooleanField.create(
        Identifier.DELETED,
        Gitbranch::getDeleted,
        Gitbranch::setDeleted,
        new ByteZeroOneToBooleanMapper(),
        false
    );
    
    /**
     * Returns the id of this Gitbranch. The id field corresponds to the
     * database column gits.gits.gitbranch.id.
     * 
     * @return the id of this Gitbranch
     */
    long getId();
    
    /**
     * Returns the projectId of this Gitbranch. The projectId field corresponds
     * to the database column gits.gits.gitbranch.project_id.
     * 
     * @return the projectId of this Gitbranch
     */
    long getProjectId();
    
    /**
     * Returns the name of this Gitbranch. The name field corresponds to the
     * database column gits.gits.gitbranch.name.
     * 
     * @return the name of this Gitbranch
     */
    String getName();
    
    /**
     * Returns the baseChash of this Gitbranch. The baseChash field corresponds
     * to the database column gits.gits.gitbranch.base_chash.
     * 
     * @return the baseChash of this Gitbranch
     */
    String getBaseChash();
    
    /**
     * Returns the baseRef of this Gitbranch. The baseRef field corresponds to
     * the database column gits.gits.gitbranch.base_ref.
     * 
     * @return the baseRef of this Gitbranch
     */
    String getBaseRef();
    
    /**
     * Returns the baseline of this Gitbranch. The baseline field corresponds to
     * the database column gits.gits.gitbranch.baseline.
     * 
     * @return the baseline of this Gitbranch
     */
    LocalDateTime getBaseline();
    
    /**
     * Returns the creationTime of this Gitbranch. The creationTime field
     * corresponds to the database column gits.gits.gitbranch.creation_time.
     * 
     * @return the creationTime of this Gitbranch
     */
    LocalDateTime getCreationTime();
    
    /**
     * Returns the updateTime of this Gitbranch. The updateTime field
     * corresponds to the database column gits.gits.gitbranch.update_time.
     * 
     * @return the updateTime of this Gitbranch
     */
    LocalDateTime getUpdateTime();
    
    /**
     * Returns the deleted of this Gitbranch. The deleted field corresponds to
     * the database column gits.gits.gitbranch.deleted.
     * 
     * @return the deleted of this Gitbranch
     */
    boolean getDeleted();
    
    /**
     * Sets the id of this Gitbranch. The id field corresponds to the database
     * column gits.gits.gitbranch.id.
     * 
     * @param id to set of this Gitbranch
     * @return   this Gitbranch instance
     */
    Gitbranch setId(long id);
    
    /**
     * Sets the projectId of this Gitbranch. The projectId field corresponds to
     * the database column gits.gits.gitbranch.project_id.
     * 
     * @param projectId to set of this Gitbranch
     * @return          this Gitbranch instance
     */
    Gitbranch setProjectId(long projectId);
    
    /**
     * Sets the name of this Gitbranch. The name field corresponds to the
     * database column gits.gits.gitbranch.name.
     * 
     * @param name to set of this Gitbranch
     * @return     this Gitbranch instance
     */
    Gitbranch setName(String name);
    
    /**
     * Sets the baseChash of this Gitbranch. The baseChash field corresponds to
     * the database column gits.gits.gitbranch.base_chash.
     * 
     * @param baseChash to set of this Gitbranch
     * @return          this Gitbranch instance
     */
    Gitbranch setBaseChash(String baseChash);
    
    /**
     * Sets the baseRef of this Gitbranch. The baseRef field corresponds to the
     * database column gits.gits.gitbranch.base_ref.
     * 
     * @param baseRef to set of this Gitbranch
     * @return        this Gitbranch instance
     */
    Gitbranch setBaseRef(String baseRef);
    
    /**
     * Sets the baseline of this Gitbranch. The baseline field corresponds to
     * the database column gits.gits.gitbranch.baseline.
     * 
     * @param baseline to set of this Gitbranch
     * @return         this Gitbranch instance
     */
    Gitbranch setBaseline(LocalDateTime baseline);
    
    /**
     * Sets the creationTime of this Gitbranch. The creationTime field
     * corresponds to the database column gits.gits.gitbranch.creation_time.
     * 
     * @param creationTime to set of this Gitbranch
     * @return             this Gitbranch instance
     */
    Gitbranch setCreationTime(LocalDateTime creationTime);
    
    /**
     * Sets the updateTime of this Gitbranch. The updateTime field corresponds
     * to the database column gits.gits.gitbranch.update_time.
     * 
     * @param updateTime to set of this Gitbranch
     * @return           this Gitbranch instance
     */
    Gitbranch setUpdateTime(LocalDateTime updateTime);
    
    /**
     * Sets the deleted of this Gitbranch. The deleted field corresponds to the
     * database column gits.gits.gitbranch.deleted.
     * 
     * @param deleted to set of this Gitbranch
     * @return        this Gitbranch instance
     */
    Gitbranch setDeleted(boolean deleted);
    
    /**
     * Queries the specified manager for the referenced Gitrepos. If no such
     * Gitrepos exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Gitrepos findProjectId(Manager<Gitrepos> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Gitbranch> {
        
        ID            ("id"),
        PROJECT_ID    ("project_id"),
        NAME          ("name"),
        BASE_CHASH    ("base_chash"),
        BASE_REF      ("base_ref"),
        BASELINE      ("baseline"),
        CREATION_TIME ("creation_time"),
        UPDATE_TIME   ("update_time"),
        DELETED       ("deleted");
        
        private final String columnId;
        private final TableIdentifier<Gitbranch> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "gits";
        }
        
        @Override
        public String getSchemaId() {
            return "gits";
        }
        
        @Override
        public String getTableId() {
            return "gitbranch";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Gitbranch> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}